@model projetodweb_connectify.Models.Feed
@Html.AntiForgeryToken()
@{
    ViewData["Title"] = "Connectify";
    ViewData["LoggedInUserProfileId"] = Model.CurrentUserProfileId;
}

<div class="container mt-4">
    <div class="row">
        <!-- Coluna Principal do Feed (Centro) -->
        <div class="col-lg-7 col-md-12">

            <!-- Bloco de boas-vindas para utilizadores não autenticados. -->
            @if (!Model.IsUserAuthenticated)
            {
                <div class="welcome-box">
                    <img src="~/images/logo-icon.png" alt="Connectify Icon" class="welcome-icon" />
                    <h4 class="welcome-title">Bem-vindo à nova geração Connectify!</h4>
                    <p class="welcome-text">
                        Faça <a asp-area="Identity" asp-page="/Account/Login">login</a> ou <a asp-area="Identity" asp-page="/Account/Register">registe-se</a> para ver posts e interagir com a comunidade.
                    </p>
                </div>
            }

            <!-- Abas de Navegação -->
            <ul class="nav nav-tabs mb-3" id="feedTabs" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active" id="general-feed-tab" data-bs-toggle="tab" data-bs-target="#general-feed" type="button" role="tab">Para Si</button>
                </li>
                @if (Model.IsUserAuthenticated)
                {
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="friends-feed-tab" data-bs-toggle="tab" data-bs-target="#friends-feed" type="button" role="tab">Amigos</button>
                    </li>
                }
            </ul>

            <!-- Conteúdo das Abas -->
            <div class="tab-content" id="feedTabsContent">
                <!-- Aba "Para Si" (Publicações Gerais) -->
                <div class="tab-pane fade show active" id="general-feed" role="tabpanel">
                    @if (Model.GeneralPosts.Any())
                    {
                        foreach (var post in Model.GeneralPosts)
                        {
                            @await Html.PartialAsync("_TopicPostCard", post)
                        }
                    }
                    else
                    {
                        <div class="text-center p-5 empty-state">
                            <i class="fas fa-newspaper fa-3x text-muted mb-3"></i>
                            <p class="lead">Ainda não há publicações para mostrar.</p>
                            @if (Model.IsUserAuthenticated)
                            {
                                <p><a asp-controller="Topics" asp-action="Index" class="btn btn-primary-custom">Explorar Tópicos</a></p>
                            }
                        </div>
                    }
                </div>

                <!-- Aba "Amigos" -->
                @if (Model.IsUserAuthenticated)
                {
                    <div class="tab-pane fade" id="friends-feed" role="tabpanel">
                        @if (Model.CurrentUserProfileId == null)
                        {
                            <div class="alert alert-warning">
                                Para ver as publicações dos seus amigos, primeiro precisa de <a asp-controller="Profiles" asp-action="Create">criar o seu perfil</a>.
                            </div>
                        }
                        else if (!Model.UserHasFriends)
                        {
                            <div class="text-center p-5 empty-state">
                                <i class="fas fa-user-friends fa-3x text-muted mb-3"></i>
                                <p class="lead">Ainda não tem amigos.</p>
                                <p><a asp-controller="Profiles" asp-action="BrowseUsers" class="btn btn-primary-custom">Encontrar Amigos</a></p>
                            </div>
                        }
                        else if (Model.FriendsPosts.Any())
                        {
                            foreach (var post in Model.FriendsPosts)
                            {
                                @await Html.PartialAsync("_TopicPostCard", post)
                            }
                        }
                        else
                        {
                            <div class="text-center p-5 empty-state">
                                <i class="fas fa-couch fa-3x text-muted mb-3"></i>
                                <p class="lead">Os seus amigos ainda não publicaram nada.</p>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>

        <!-- Coluna da Barra Lateral (Direita) -->
        <div class="col-lg-5 d-none d-lg-block">
            <div style="position: sticky; top: 20px;">
                <!-- TÓPICOS RECOMENDADOS -->
                @if (Model.RecommendedTopics.Any())
                {
                    <div class="sidebar-section p-3 bg-white rounded shadow-sm mb-4">
                        <h5 class="mb-3 section-title">Tópicos Populares</h5>
                        <ul class="list-unstyled">
                            @foreach (var topic in Model.RecommendedTopics.Take(5))
                            {
                                <li class="mb-3">
                                    <a asp-controller="Topics" asp-action="Details" asp-route-id="@topic.Id" class="d-flex align-items-center text-decoration-none text-dark sidebar-item-hover">
                                        <img src="@(topic.TopicImageUrl ?? "/images/default-topic.jpg")" class="rounded me-3" style="width: 50px; height: 50px; object-fit: cover;">
                                        <div>
                                            <span class="fw-bold">@topic.Title</span>
                                            <small class="d-block text-muted">Criado por @(topic.Creator?.Name ?? "Desconhecido")</small>
                                        </div>
                                    </a>
                                </li>
                            }
                        </ul>
                    </div>
                }

                <!-- SUGESTÕES DE AMIZADE -->
                @if (Model.IsUserAuthenticated && Model.FriendshipSuggestions.Any())
                {
                    <div class="sidebar-section p-3 bg-white rounded shadow-sm">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h5 class="mb-0 section-title">Sugestões para si</h5>
                            <a asp-controller="Profiles" asp-action="Search" class="small text-decoration-none">Ver todas</a>
                        </div>
                        <ul class="list-unstyled">
                            @foreach (var suggestion in Model.FriendshipSuggestions.Take(4))
                            {
                                <li class="mb-3 d-flex align-items-center justify-content-between">
                                    <a href="/profile/@suggestion.User.Username" class="d-flex align-items-center text-decoration-none text-dark flex-grow-1 sidebar-item-hover">
                                        <img src="@(suggestion.ProfilePicture ?? "/images/defaultuser.png")" alt="Foto de @suggestion.Name" class="rounded-circle me-3" style="width: 40px; height: 40px; object-fit: cover;">
                                        <div class="me-2">
                                            <span class="fw-bold">@suggestion.Name</span>
                                            <small class="d-block text-muted">Sugestão</small>
                                        </div>
                                    </a>
                                    <button class="btn btn-sm btn-primary-custom follow-suggestion-btn" data-target-userid="@suggestion.User.Id">Conectar</button>
                                </li>
                            }
                        </ul>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {

    <!-- Adicionado script com cliente JS do signalR -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.7/signalr.min.js"
            integrity="sha512-7SRCYIJtR6F8ocwW7UxW6wGKqbSyqREDbfCORCbGLatU0iugBLwyOXpzhkPyHIFdBO0K2VCu57fvP2Twgx1o2A=="
            crossorigin="anonymous" referrerpolicy="no-referrer"></script>

    <script>
        document.addEventListener("DOMContentLoaded", function () {

            // 1. Criar a ligação com o Hub do SignalR.
            const likesConnection = new signalR.HubConnectionBuilder()
                .withUrl("/likesHub") // <-- Corresponde ao Program.cs
                .configureLogging(signalR.LogLevel.Information)
                .build();

            // 2. Definir o que acontece quando o servidor envia uma atualização.
            likesConnection.on("ReceiveLikeUpdate", (postId, newLikeCount) => { // <-- Corresponde ao SendAsync do Hub
                const countElement = document.getElementById(`like-count-post-feed-${postId}`); // <-- Encontra o contador correto
                if (countElement) {
                    countElement.textContent = newLikeCount;
                }
            });

            // 3. Função para iniciar a ligação e tratar de erros.
            async function startLikesConnection() {
                try {
                    await likesConnection.start();
                    console.log("SignalR Ligado ao LikesHub.");
                    // Depois de ligar, anexa os eventos de clique aos botões de "gosto".
                    attachLikeButtonListeners();
                } catch (err) {
                    console.error("Falha na ligação SignalR: ", err);
                    setTimeout(startLikesConnection, 5000); // Tenta reconectar em 5 segundos.
                }
            }

            // 4. Função para anexar os eventos de clique aos botões de "gosto".
            function attachLikeButtonListeners() {
                document.querySelectorAll('.signalr-like-button').forEach(button => {
                    // Previne a adição de múltiplos listeners ao mesmo botão.
                    button.removeEventListener('click', handleLikeClick);
                    button.addEventListener('click', handleLikeClick);
                });
            }

            // 5. Função que gere o clique no botão de "gosto".
            function handleLikeClick(event) {
                const button = this;
                const postId = button.getAttribute('data-post-id');

                button.classList.toggle('text-muted');
                button.classList.toggle('text-primary');
                button.classList.toggle('fw-bold');

                // Envia a informação para o Hub no servidor.
                likesConnection.invoke("TogglePostLike", postId).catch(err => { // <-- Corresponde ao método no Hub
                     console.error("Erro ao enviar 'gosto': ", err.toString());
                     button.classList.toggle('text-muted');
                     button.classList.toggle('text-primary');
                     button.classList.toggle('fw-bold');
                });
            }

            // Inicia a ligação do SignalR quando a página carrega.
            startLikesConnection();

            // Reanexa os listeners sempre que uma nova aba do feed é exibida.
            document.querySelectorAll('button[data-bs-toggle="tab"]').forEach(tab => {
                tab.addEventListener('shown.bs.tab', function() {
                    attachLikeButtonListeners();
                });
            });

            // --- LÓGICA AJAX PARA SUGESTÕES DE AMIZADE (JQUERY) ---
            // Esta parte foi mantida como estava, pois é uma funcionalidade diferente.
            $('.follow-suggestion-btn').on('click', function () {
                var button = $(this);
                var targetUserId = button.data('target-userid');
                var originalText = button.text();
                button.prop('disabled', true).text('A enviar...');

                $.ajax({
                    url: '/api/friendships/request/' + targetUserId,
                    type: 'POST',
                    contentType: 'application/json',
                    headers: { 'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val() },
                    success: function (response) {
                        button.text('Pedido Enviado').removeClass('btn-primary-custom').addClass('btn-secondary');
                    },
                    error: function (xhr, status, error) {
                        button.prop('disabled', false).text(originalText);
                        var errorMessage = (xhr.responseJSON && xhr.responseJSON.message) ? xhr.responseJSON.message : "Erro ao enviar pedido.";
                        alert(errorMessage);
                    }
                });
            });

        });
    </script>
}

<style>
    /* O bloco de estilos permanece o mesmo, não precisa de ser alterado. */
    :root {
        --color-primary-dark: #1D3461;
        --color-primary-medium: #376996;
    }

    .welcome-box {
        background-color: #E0F7FA;
        color: #01579B;
        border: 1px solid #B2EBF2;
        border-radius: 12px;
        text-align: center;
        padding: 2.5rem 1.5rem;
        margin-bottom: 2rem;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
    }

    /* ... resto do CSS ... */
</style>