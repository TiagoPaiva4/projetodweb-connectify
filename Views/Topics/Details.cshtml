@* Define o tipo de dados que esta view espera receber do Controller, neste caso, um objeto do tipo 'Topic'. *@
@model projetodweb_connectify.Models.Topic
@* Importa os serviços do ASP.NET Core Identity para verificar o estado de login do utilizador. *@
@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager

@{
    // Define o título da página com base no título do tópico recebido.
    ViewData["Title"] = Model.Title;
    
    // Define caminhos para imagens padrão, caso a imagem do tópico ou do utilizador não exista.
    string defaultTopicImage = Url.Content("~/images/topics/default_topic_image.png");
    string topicImageUrl = string.IsNullOrEmpty(Model.TopicImageUrl) ? defaultTopicImage : Url.Content(Model.TopicImageUrl);
    string defaultUserImage = Url.Content("~/images/defaultuser.png");

    // Obtém variáveis do ViewBag, que foram definidas no Controller, para controlar a lógica da view.
    bool isTopicCreator = ViewBag.IsCurrentUserTheCreator ?? false;
    int? loggedInUserProfileId = ViewBag.CurrentUserProfileId as int?;
}

<div class="container mt-4">
    <div class="row">
        <div class="col-md-10 offset-md-1">

            <!-- Cartão que exibe os detalhes principais do Tópico. -->
            <div class="card shadow-sm mb-4">
                <img src="@topicImageUrl" alt="Imagem do Tópico: @Model.Title" class="card-img-top img-fluid" style="max-height: 400px; object-fit: cover;" onerror="this.onerror=null; this.src='@defaultTopicImage';" />
                <div class="card-body">
                    <h1 class="card-title">@Html.DisplayFor(model => model.Title)</h1>
                    @if (Model.IsPrivate)
                    {
                        <span class="badge bg-warning text-dark mb-2"><i class="fas fa-lock"></i> Tópico Privado</span>
                    }

                    <p class="card-text text-muted">
                        @Html.Raw(Model.Description?.Replace(Environment.NewLine, "<br />"))
                    </p>
                    <hr />
                    <dl class="row">
                        <dt class="col-sm-3 col-md-2">Criado por:</dt>
                        <dd class="col-sm-9 col-md-10">
                            @if (Model.Creator != null && Model.Creator.User != null)
                            {
                                <a asp-controller="Profiles" asp-action="Details" asp-route-id="@Model.Creator.Id">
                                    @(Model.Creator.Name ?? Model.Creator.User.Username)
                                </a>
                            }
                            else
                            {
                                @: Utilizador Desconhecido
                            }
                        </dd>
                        <dt class="col-sm-3 col-md-2">@Html.DisplayNameFor(model => model.CreatedAt):</dt>
                        <dd class="col-sm-9 col-md-10">
                            <span title="@Model.CreatedAt.ToString("F")">@Model.CreatedAt.ToString("dd/MM/yyyy 'às' HH:mm")</span>
                        </dd>
                    </dl>

                    @* Ações de gestão do tópico (Editar/Apagar), visíveis apenas para o criador. *@
                    <div class="mt-3">
                        @if (isTopicCreator)
                        {
                            <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-sm btn-outline-primary me-2">
                                <i class="fas fa-edit"></i> Editar Tópico
                            </a>
                            <a asp-action="Delete" asp-route-id="@Model.Id" class="btn btn-sm btn-outline-danger me-2">
                                <i class="fas fa-trash-alt"></i> Apagar Tópico
                            </a>
                        }
                    </div>
                </div>
            </div>

            <!-- Botão para adicionar uma nova publicação a este tópico. -->
            <div class="mb-3 text-end">
                <a asp-controller="TopicPosts" asp-action="Create" asp-route-topicId="@Model.Id" class="btn btn-success">
                    <i class="fas fa-plus-circle"></i> Adicionar Nova Publicação
                </a>
            </div>

            <h3 class="mt-4 mb-3">Publicações no Tópico (@(Model.Posts?.Count ?? 0))</h3>

            @* Verifica se existem publicações para exibir. *@
            @if (Model.Posts != null && Model.Posts.Any())
            {
                @* Itera sobre cada publicação (post) do tópico. *@
                foreach (var post in Model.Posts)
                {
                    <div class="card mb-3 shadow-sm" id="post-@post.Id">
                        <div class="card-body">
                            @* Exibe a imagem da publicação, se existir. *@
                            @if (!string.IsNullOrEmpty(post.PostImageUrl))
                            {
                                <div class="mb-3 text-center">
                                    <img src="@Url.Content(post.PostImageUrl)" alt="Imagem da Publicação" class="img-fluid rounded" style="max-height: 500px; object-fit: contain;" onerror="this.style.display='none';" />
                                </div>
                            }
                            
                            @* Exibe o conteúdo da publicação e o seu autor. *@
                            <p class="card-text">
                                @Html.Raw(post.Content?.Replace(Environment.NewLine, "<br />"))
                            </p>
                            <footer class="blockquote-footer mt-2">
                                Publicado por
                                @if (post.Profile != null)
                                {
                                    <a asp-controller="Profiles" asp-action="Details" asp-route-id="@post.ProfileId" class="text-decoration-none">
                                        @(post.Profile.Name ?? post.Profile.User?.Username ?? "Utilizador Desconhecido")
                                    </a>
                                }
                                else
                                {
                                    @: Utilizador Desconhecido
                                }
                                em <span title="@post.CreatedAt.ToString("F")">@post.CreatedAt.ToString("dd/MM/yyyy HH:mm")</span>
                            </footer>
                            
                            @* Secção de ações combinadas: Botão de Gosto e botões de Editar/Apagar. *@
                            <div class="d-flex justify-content-between align-items-center mt-3">
                                <!-- Botão de Gosto para a publicação, funciona com AJAX. -->
                                @if (SignInManager.IsSignedIn(User))
                                {
                                    <form asp-controller="Likes" asp-action="TogglePostLike" asp-route-id="@post.Id" 
                                          data-like-form="@($"post-{post.Id}")" class="d-inline-flex align-items-center me-3">
                                        @{
                                            var hasLikedPost = post.Likes.Any(l => l.ProfileId == loggedInUserProfileId);
                                        }
                                        <button type="submit" class="btn btn-sm @(hasLikedPost ? "btn-primary" : "btn-outline-primary")">
                                            <i class="fas fa-thumbs-up"></i> @(hasLikedPost ? "Gostei" : "Gosto")
                                        </button>
                                        <span class="ms-2" data-like-count="@($"post-{post.Id}")">@post.Likes.Count</span>
                                    </form>
                                }
                                else
                                {
                                    <span class="d-inline-flex align-items-center me-3">
                                        <button class="btn btn-sm btn-outline-primary" disabled><i class="fas fa-thumbs-up"></i> Gosto</button>
                                        <span class="ms-2">@post.Likes.Count</span>
                                    </span>
                                }

                                <!-- Botões de Editar/Apagar a publicação, visíveis apenas para o autor. -->
                                <div class="text-end">
                                    @if (loggedInUserProfileId.HasValue && post.ProfileId == loggedInUserProfileId.Value)
                                    {
                                        <a asp-controller="TopicPosts" asp-action="Edit" asp-route-id="@post.Id" class="btn btn-sm btn-outline-secondary me-1"><i class="fas fa-pen"></i> Editar</a>
                                        <form asp-controller="TopicPosts" asp-action="Delete" asp-route-id="@post.Id" method="post" class="d-inline" onsubmit="return confirm('Tem certeza que deseja apagar esta publicação?');">
                                            @Html.AntiForgeryToken()
                                            <button type="submit" class="btn btn-sm btn-outline-danger"><i class="fas fa-times"></i> Apagar</button>
                                        </form>
                                    }
                                </div>
                            </div>

                            <hr class="my-3" />
                            @* Secção dedicada a exibir e adicionar comentários. *@
                            <div class="comments-section ms-3">
                                <h6 class="mb-2">Comentários (@post.Comments.Count)</h6>

                                @if (post.Comments != null && post.Comments.Any())
                                {
                                    @* Itera sobre cada comentário da publicação. *@
                                    foreach (var comment in post.Comments)
                                    {
                                        <div class="comment mb-2 pb-2 border-bottom">
                                            <div class="d-flex align-items-start">
                                                <img src="@(string.IsNullOrEmpty(comment.Profile?.ProfilePicture) ? defaultUserImage : Url.Content(comment.Profile.ProfilePicture))"
                                                     alt="Foto de @(comment.Profile?.Name ?? comment.Profile?.User?.Username)"
                                                     class="rounded-circle me-2" width="32" height="32"
                                                     onerror="this.onerror=null; this.src='@defaultUserImage';" />
                                                <div class="flex-grow-1">
                                                    <strong>
                                                        <a asp-controller="Profiles" asp-action="Details" asp-route-id="@comment.Profile.Id" class="text-dark text-decoration-none">
                                                            @(comment.Profile.Name ?? comment.Profile.User?.Username ?? "Anónimo")
                                                        </a>
                                                    </strong>
                                                    <small class="text-muted ms-2" title="@comment.CreatedAt.ToString("F")">
                                                        @comment.CreatedAt.ToString("dd/MM/yy HH:mm")
                                                    </small>
                                                    <p class="mb-0">@Html.Raw(comment.Content?.Replace(Environment.NewLine, "<br />"))</p>

                                                    <!-- Botão de Gosto para o comentário. -->
                                                    <div class="mt-1">
                                                        @if (SignInManager.IsSignedIn(User))
                                                        {
                                                            <form asp-controller="Likes" asp-action="ToggleCommentLike" asp-route-id="@comment.Id"
                                                                  data-like-form="@($"comment-{comment.Id}")" class="d-inline-flex align-items-center">
                                                                @{
                                                                    var hasLikedComment = comment.Likes.Any(l => l.ProfileId == loggedInUserProfileId);
                                                                }
                                                                <button type="submit" class="btn btn-sm @(hasLikedComment ? "btn-info text-white" : "btn-outline-info")" style="--bs-btn-padding-y: .1rem; --bs-btn-padding-x: .4rem; --bs-btn-font-size: .75rem;">
                                                                    <i class="fas fa-thumbs-up"></i> @(hasLikedComment ? "Gostei" : "Gosto")
                                                                </button>
                                                                <span class="ms-2 small" data-like-count="@($"comment-{comment.Id}")">@comment.Likes.Count</span>
                                                            </form>
                                                        }
                                                        else
                                                        {
                                                            <span class="d-inline-flex align-items-center">
                                                                <button class="btn btn-sm btn-outline-info" style="--bs-btn-padding-y: .1rem; --bs-btn-padding-x: .4rem; --bs-btn-font-size: .75rem;" disabled><i class="fas fa-thumbs-up"></i> Gosto</button>
                                                                <span class="ms-2 small">@comment.Likes.Count</span>
                                                            </span>
                                                        }
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <p class="text-muted small"><em>Ainda não há comentários. Seja o primeiro a comentar!</em></p>
                                }
                                
                                <!-- Formulário para adicionar um novo comentário. Visível apenas para utilizadores autenticados com perfil. -->
                                @if (User.Identity != null && User.Identity.IsAuthenticated && loggedInUserProfileId.HasValue)
                                {
                                    <div class="add-comment-form mt-3" id="comment-form-@post.Id">
                                        <form asp-controller="Topics" asp-action="AddComment" method="post">
                                            @Html.AntiForgeryToken()
                                            <input type="hidden" name="TopicPostId" value="@post.Id" />
                                            <input type="hidden" name="ReturnUrl" value="@Url.Action("Details", "Topics", new { id = Model.Id })" />
                                            <div class="mb-2">
                                                <textarea name="Content" class="form-control form-control-sm" rows="2" placeholder="Escreva o seu comentário..." required></textarea>
                                            </div>
                                            <button type="submit" class="btn btn-sm btn-primary">
                                                <i class="fas fa-paper-plane"></i> Comentar
                                            </button>
                                        </form>
                                    </div>
                                }
                                else if (User.Identity != null && User.Identity.IsAuthenticated && !loggedInUserProfileId.HasValue)
                                {
                                     <p class="mt-3"><a asp-controller="Profiles" asp-action="Create">Crie um perfil</a> para comentar.</p>
                                }
                                else
                                {
                                    <p class="mt-3"><a asp-area="Identity" asp-page="/Account/Login" asp-route-returnUrl="@Url.Action("Details", "Topics", new { id = Model.Id })">Inicie sessão</a> para comentar.</p>
                                }
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="alert alert-info" role="alert">
                    <i class="fas fa-info-circle"></i> Ainda não existem publicações neste tópico. Seja o primeiro a publicar!
                </div>
            }

            <div class="mt-4 mb-5">
                <a asp-action="Index" class="btn btn-outline-secondary">
                    <i class="fas fa-arrow-left"></i> Voltar à Lista de Tópicos
                </a>
            </div>
        </div>
    </div>
</div>

<!-- Secção para scripts que serão injetados no final da página. -->
@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script>
        // Este script é executado quando o documento HTML está completamente carregado.
        document.addEventListener('DOMContentLoaded', function () {
            
            // Encontra todos os formulários de "Gosto" na página.
            const allLikeForms = document.querySelectorAll('form[data-like-form]');
            
            // Adiciona um "ouvinte" de eventos a cada formulário encontrado.
            allLikeForms.forEach(form => {
                form.addEventListener('submit', function (e) {
                    // Impede o comportamento padrão do formulário (que seria recarregar a página).
                    e.preventDefault();

                    const currentForm = this;
                    const url = currentForm.action;
                    // Obtém o token anti-falsificação, essencial para a segurança de requisições POST.
                    const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;

                    if (!token) {
                        console.error('Anti-forgery token not found.');
                        return;
                    }

                    // Envia uma requisição assíncrona (AJAX) para o servidor com a API 'fetch'.
                    fetch(url, {
                        method: 'POST',
                        headers: {
                            'RequestVerificationToken': token
                        }
                    })
                    .then(response => {
                        // Verifica se a resposta do servidor foi bem-sucedida.
                        if (response.status === 401) {
                            alert("Precisa de iniciar sessão para gostar disto.");
                            throw new Error('Unauthorized');
                        }
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        // Converte a resposta do servidor (que está em formato JSON) para um objeto JavaScript.
                        return response.json();
                    })
                    .then(data => {
                        // 'data' é o objeto { count: newLikeCount } retornado pelo LikesController.
                        // Esta secção atualiza a interface do utilizador sem recarregar a página.
                        const itemId = currentForm.getAttribute('data-like-form');
                        const countSpan = document.querySelector(`span[data-like-count="${itemId}"]`);
                        const button = currentForm.querySelector('button[type="submit"]');

                        // Atualiza o texto do contador de gostos.
                        countSpan.textContent = data.count;
                        
                        // Alterna a aparência do botão para dar feedback visual ao utilizador.
                        const isPost = itemId.startsWith('post');
                        const likedClass = isPost ? 'btn-primary' : 'btn-info';
                        const unlikedClass = isPost ? 'btn-outline-primary' : 'btn-outline-info';
                        
                        if (button.classList.contains(unlikedClass)) {
                            // Se o botão estava "não gostado", muda para o estilo "gostado".
                            button.classList.remove(unlikedClass);
                            button.classList.add(likedClass);
                            if (!isPost) button.classList.add('text-white');
                            button.innerHTML = '<i class="fas fa-thumbs-up"></i> Gostei';
                        } else {
                            // Se o botão estava "gostado", muda para o estilo "não gostado".
                            button.classList.remove(likedClass, 'text-white');
                            button.classList.add(unlikedClass);
                            button.innerHTML = '<i class="fas fa-thumbs-up"></i> Gosto';
                        }
                    })
                    .catch(error => {
                        // Captura e exibe no console quaisquer erros que ocorram durante a requisição.
                        if (error.message !== 'Unauthorized') {
                           console.error('Error toggling like:', error);
                        }
                    });
                });
            });
        });
    </script>
}