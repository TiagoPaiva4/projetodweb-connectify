@* Define o tipo de dados que esta view espera receber do Controller: uma coleção de objetos 'Topic'. *@
@model IEnumerable<projetodweb_connectify.Models.Topic>
@* Importa os serviços do ASP.NET Core Identity. *@
@using Microsoft.AspNetCore.Identity
@* Importa o namespace dos Models para aceder ao modelo 'Category' no ViewBag. *@
@using projetodweb_connectify.Models

@{
    // Define o título da página que será exibido no separador do browser.
    ViewData["Title"] = "Explorar Tópicos";
    
    // Define caminhos para imagens padrão, que serão usadas caso um tópico ou categoria não tenha uma imagem específica.
    string defaultTopicImage = Url.Content("~/images/topics/default_topic_image.png");
    var categoriesList = ViewData["CategoriesList"] as List<Category>;
    string defaultCategoryImage = Url.Content("~/images/categories/default_category_image.png");
}

@* Secção para injetar estilos CSS específicos para esta página no <head> do layout principal. *@
@section Styles {
    <style>
        /* A secção de CSS permanece inalterada, pois é apenas para estilização. */
        /* ... (CSS inalterado) ... */
    </style>
}

<div class="page-container">
    <!-- Secção para exibir uma lista de categorias de forma horizontal e com scroll. -->
    <div class="category-section mb-4">
        <h2 class="h4 section-title mb-3">
            <a asp-controller="Categories" asp-action="Index" class="text-decoration-none">
                Categorias <i class="fas fa-arrow-right ms-1 fs-sm align-middle"></i>
            </a>
        </h2>
        @* Verifica se a lista de categorias enviada pelo Controller não é nula e contém itens. *@
        @if (categoriesList != null && categoriesList.Any())
        {
            <div class="category-scroll-container pb-2">
                @* Itera sobre cada categoria para criar um link e um ícone para ela. *@
                @foreach (var category in categoriesList)
                {
                    <a asp-controller="Categories" asp-action="Details" asp-route-id="@category.Id" class="category-item">
                        <div class="category-icon-circle" style="background-image: url('@(Url.Content(category.CategoryImageUrl ?? defaultCategoryImage))');"></div>
                        <span class="category-name">@category.Name</span>
                    </a>
                }
            </div>
        }
        else
        {
            <p class="text-muted mb-0">Nenhuma categoria encontrada.</p>
        }
    </div>
    
    <!-- Cabeçalho da secção de tópicos, com o título e o botão para criar um novo tópico. -->
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2 class="h4 section-title mb-0">
            Tópicos Populares
        </h2>
        @* O botão "Novo Tópico" só é exibido se o utilizador estiver autenticado. *@
        @if (User.Identity != null && User.Identity.IsAuthenticated)
        {
            <a asp-action="Create" class="btn btn-sm btn-create-topic"><i class="fas fa-plus me-1"></i> Novo Tópico</a>
        }
    </div>

    @* Exibe uma mensagem de sucesso (ex: "Tópico criado com sucesso!") se ela for passada pelo Controller via TempData. *@
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success">@TempData["SuccessMessage"]</div>
    }

    @* Se não existirem tópicos para exibir, mostra uma mensagem informativa. *@
    @if (!Model.Any())
    {
        <div class="alert alert-info text-center">Ainda não existem tópicos. Seja o primeiro a criar um!</div>
    }
    else
    {
        <!-- Grelha (Grid) para exibir os cartões dos tópicos. É responsiva a diferentes tamanhos de ecrã. -->
        <div class="row row-cols-1 row-cols-sm-2 row-cols-lg-3 row-cols-xl-4 g-4">
            @* Itera sobre cada 'item' (tópico) na coleção 'Model' para criar um cartão. *@
            @foreach (var item in Model)
            {
                <div class="col">
                    @* O cartão inteiro é um link para a página de detalhes do tópico. *@
                    <a asp-action="Details" asp-route-id="@item.Id" class="topic-card-link">
                        <div class="card topic-card">
                            <div class="topic-card-image-wrapper">
                                <img src="@(Url.Content(item.TopicImageUrl ?? defaultTopicImage))" alt="Imagem do Tópico: @item.Title" />
                                @* Se o tópico for privado, exibe um ícone de cadeado. *@
                                @if (item.IsPrivate)
                                {
                                    <span class="badge private-topic-badge" title="Tópico Privado"><i class="fas fa-lock"></i></span>
                                }
                            </div>
                            <div class="card-body">
                                <h5 class="card-title topic-title">@item.Title</h5>

                                @* Exibe a categoria do tópico, se estiver associada a uma. *@
                                @if (item.Category != null)
                                {
                                    <div class="topic-category-container">
                                        <span class="topic-category-tag">@item.Category.Name</span>
                                    </div>
                                }
                                
                                @* Exibe uma pré-visualização da descrição do tópico, limitada a 80 caracteres. *@
                                <p class="card-text topic-description">
                                    @Html.Raw(item.Description?.Length > 80 ? System.Web.HttpUtility.HtmlEncode(item.Description.Substring(0, 80)) + "..." : System.Web.HttpUtility.HtmlEncode(item.Description ?? ""))
                                </p>

                                @* Rodapé do cartão, exibindo a data de criação. *@
                                <div class="topic-footer">
                                    Criado a @item.CreatedAt.ToString("dd MMM yyyy")
                                </div>
                            </div>
                        </div>
                    </a>
                </div>
            }
        </div>
    }
</div>