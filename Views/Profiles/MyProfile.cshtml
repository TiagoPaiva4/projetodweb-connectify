@{
	ViewData["Title"] = "O Meu Perfil";
}

<!-- Não precisa do <h1>, o nome de utilizador servirá de título -->
<!-- Secção para mostrar um estado de carregamento -->
<div id="loading-state" class="text-center mt-5">
	<div class="spinner-border" role="status">
		<span class="visually-hidden">A carregar...</span>
	</div>
	<p class="mt-2">A carregar perfil...</p>
</div>

<!-- Secção do perfil, inicialmente escondida -->
<div id="profile-content" style="display: none;">
	<!-- Cabeçalho do Perfil -->
	<header class="profile-header">
		<div class="profile-avatar-container">
			<img id="profile-picture" src="" alt="Foto de Perfil" class="profile-avatar" />
		</div>
		<div class="profile-info">
			<div class="profile-info-header">
				<h2 id="profile-username" class="profile-username"></h2>
				<button class="btn-edit-profile">Editar perfil</button>
			</div>
			<ul class="profile-stats">
				<li><span id="topics-count" class="stat-number">0</span> tópicos</li>
				<li><span id="followers-count" class="stat-number">0</span> seguidores</li>
				<li><span id="following-count" class="stat-number">0</span> a seguir</li>
			</ul>
			<div class="profile-bio">
				<strong id="profile-name"></strong>
				<p id="profile-bio"></p>
			</div>
		</div>
	</header>

	<!-- Abas de Navegação (Tabs) -->
	<div class="profile-tabs">
		<button class="tab-button active" data-target="#personal-posts-container">
			<i class="fas fa-th"></i> MURAL
		</button>
		<button class="tab-button" data-target="#created-topics-container">
			<i class="fas fa-list-ul"></i> TÓPICOS CRIADOS
		</button>
		<button class="tab-button" data-target="#saved-topics-container">
			<i class="fas fa-bookmark"></i> GUARDADOS
		</button>
	</div>

	<!-- Conteúdo das Abas -->
	<div class="profile-tab-content">
		<!-- Painel 1: Mural Pessoal (Posts) -->
		<div id="personal-posts-container" class="tab-content-panel active">
			<!-- As publicações do mural serão inseridas aqui como uma grelha -->
		</div>

		<!-- Painel 2: Tópicos Criados -->
		<div id="created-topics-container" class="tab-content-panel">
			<!-- Os tópicos criados serão inseridos aqui como uma grelha -->
		</div>

		<!-- Painel 3: Tópicos Guardados -->
		<div id="saved-topics-container" class="tab-content-panel">
			<!-- Os tópicos guardados serão inseridos aqui. Precisará de os buscar na API. -->
			<div class="empty-state">
				<div class="empty-state-icon"><i class="fas fa-bookmark"></i></div>
				<h2>Tópicos Guardados</h2>
				<p>Guarde tópicos que queira rever mais tarde.</p>
			</div>
		</div>
	</div>
</div>

<!-- Secção para mostrar erros -->
<div id="error-state" class="text-danger" style="display: none;">
	<p>Ocorreu um erro ao carregar o perfil. Por favor, tente novamente mais tarde.</p>
</div>


@section Scripts {
	<style>
		/*
						 * PALETA DE CORES AZUL
						 * Definimos as cores como variáveis para ser fácil de gerir.
						*/
		:root {
			--color-background: #fafafa; /* Fundo branco/cinza claro */
			--color-primary-dark: #1D3461; /* Azul mais escuro (texto principal, títulos, abas ativas) */
			--color-primary-medium: #376996; /* Azul médio (ícones, acentos) */
			--color-secondary-light: #6290C8; /* Azul claro (bordas, hovers de botão) */
			--color-secondary-lightest: #829CBC; /* Azul mais claro/acinzentado (texto secundário, fundo de botão) */
			--color-text-on-dark: #ffffff; /* Texto branco para overlays */
		}

		/* Estilo Geral */
		body {
			background-color: var(--color-background);
			color: var(--color-primary-dark);
		}

		/* Cabeçalho do Perfil */
		.profile-header {
			display: flex;
			align-items: center;
			margin-bottom: 40px;
			padding: 20px;
		}

		.profile-avatar-container {
			margin-right: 60px;
			flex-shrink: 0;
		}

		.profile-avatar {
			width: 150px;
			height: 150px;
			border-radius: 50%;
			object-fit: cover;
			border: 2px solid var(--color-secondary-light); /* Borda em azul claro */
		}

		.profile-info {
			flex-grow: 1;
		}

		.profile-info-header {
			display: flex;
			align-items: center;
			margin-bottom: 20px;
		}

		.profile-username {
			font-size: 28px;
			font-weight: 300;
			margin: 0;
			margin-right: 20px;
		}

		.btn-edit-profile {
			background-color: var(--color-secondary-lightest); /* Fundo do botão em azul mais claro */
			color: var(--color-primary-dark); /* Texto do botão em azul escuro para contraste */
			border: 1px solid var(--color-secondary-lightest);
			border-radius: 8px;
			padding: 5px 15px;
			font-weight: bold;
			cursor: pointer;
			transition: background-color 0.2s ease-in-out;
		}

			.btn-edit-profile:hover {
				background-color: var(--color-secondary-light); /* Hover para azul claro */
			}

		.profile-stats {
			display: flex;
			list-style: none;
			padding: 0;
			margin: 0 0 20px 0;
		}

			.profile-stats li {
				margin-right: 40px;
				font-size: 16px;
			}

			.profile-stats .stat-number {
				font-weight: bold;
			}

		.profile-bio strong {
			font-weight: bold;
		}

		.profile-bio p {
			margin-top: 5px;
			white-space: pre-wrap;
		}

		/* Abas de Navegação */
		.profile-tabs {
			display: flex;
			justify-content: center;
			border-top: 1px solid var(--color-secondary-light); /* Divisor em azul claro */
		}

		.tab-button {
			background: none;
			border: none;
			color: var(--color-secondary-lightest); /* Cor da aba inativa (azul mais claro) */
			padding: 15px 20px;
			font-size: 12px;
			font-weight: bold;
			letter-spacing: 1px;
			cursor: pointer;
			border-top: 1px solid transparent;
			margin-top: -1px;
			text-transform: uppercase;
		}

			.tab-button .fas {
				margin-right: 6px;
			}

			.tab-button.active {
				color: var(--color-primary-dark); /* Cor da aba ativa (azul escuro) */
				border-top: 1px solid var(--color-primary-dark); /* Borda superior em azul escuro */
			}

		/* Grelha de Conteúdo */
		.profile-tab-content .tab-content-panel {
			display: none;
		}

			.profile-tab-content .tab-content-panel.active {
				display: grid;
				grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
				gap: 28px;
				padding-top: 20px;
			}

		.grid-item {
			position: relative;
			width: 100%;
			aspect-ratio: 1 / 1;
			cursor: pointer;
		}

			.grid-item img {
				width: 100%;
				height: 100%;
				object-fit: cover;
				border-radius: 4px;
			}

			.grid-item .overlay {
				position: absolute;
				top: 0;
				left: 0;
				right: 0;
				bottom: 0;
				background-color: rgba(0, 0, 0, 0.5); /* Overlay escuro continua a funcionar bem */
				color: var(--color-text-on-dark);
				display: flex;
				flex-direction: column;
				justify-content: center;
				align-items: center;
				opacity: 0;
				transition: opacity 0.3s ease;
			}

			.grid-item:hover .overlay {
				opacity: 1;
			}

		.overlay-text {
			font-weight: bold;
			text-align: center;
			padding: 10px;
		}

		/* Estado Vazio */
		.empty-state {
			grid-column: 1 / -1;
			text-align: center;
			padding: 50px 20px;
			color: var(--color-secondary-lightest); /* Texto secundário em azul claro */
		}

		.empty-state-icon {
			font-size: 40px;
			color: var(--color-primary-medium); /* Ícone em azul médio */
			border: 2px solid var(--color-primary-medium); /* Borda do círculo em azul médio */
			width: 80px;
			height: 80px;
			border-radius: 50%;
			display: inline-flex;
			align-items: center;
			justify-content: center;
			margin-bottom: 20px;
		}

	</style>

	<script>
		document.addEventListener('DOMContentLoaded', function () {
			const loadingDiv = document.getElementById('loading-state');
			const profileDiv = document.getElementById('profile-content');
			const errorDiv = document.getElementById('error-state');

			const postsContainer = document.getElementById('personal-posts-container');
			const createdTopicsContainer = document.getElementById('created-topics-container');
			const savedTopicsContainer = document.getElementById('saved-topics-container'); // Container para guardados

			// Lógica das Abas (Tabs)
			const tabButtons = document.querySelectorAll('.tab-button');
			const tabPanels = document.querySelectorAll('.tab-content-panel');

			tabButtons.forEach(button => {
				button.addEventListener('click', () => {
					// Remover 'active' de todos
					tabButtons.forEach(btn => btn.classList.remove('active'));
					tabPanels.forEach(panel => panel.classList.remove('active'));

					// Adicionar 'active' ao clicado
					button.classList.add('active');
					const targetPanel = document.querySelector(button.dataset.target);
					targetPanel.classList.add('active');
				});
			});


			fetch('/api/profiles/me')
				.then(response => response.ok ? response.json() : Promise.reject(response))
				.then(data => {
					// Preencher dados do perfil
					document.getElementById('profile-picture').src = data.profilePicture || '/images/default-avatar.png';
					document.getElementById('profile-username').textContent = data.username;
					document.getElementById('profile-name').textContent = data.name;
					document.getElementById('profile-bio').innerHTML = data.bio; // innerHTML para respeitar <br> se houver

					// Preencher estatísticas (valores de exemplo, ajuste conforme a sua API)
					document.getElementById('topics-count').textContent = data.createdTopics.length;
					// document.getElementById('followers-count').textContent = data.followersCount; // Descomente quando tiver
					// document.getElementById('following-count').textContent = data.followingCount; // Descomente quando tiver

					// Renderizar Mural Pessoal e Tópicos Criados
					renderPersonalPosts(data.personalTopicPosts);
					renderCreatedTopics(data.createdTopics);
					// renderSavedTopics(data.savedTopics); // Chame esta função quando a API devolver os tópicos guardados

					loadingDiv.style.display = 'none';
					profileDiv.style.display = 'block';
				})
				.catch(error => {
					console.error('Erro ao buscar o perfil:', error);
					loadingDiv.style.display = 'none';
					errorDiv.style.display = 'block';
				});

					// Função para renderizar as publicações do mural no formato de grelha
		function renderPersonalPosts(posts) {
			postsContainer.innerHTML = '';
			if (posts && posts.length > 0) {
				posts.forEach(post => {
					// Assumindo que a sua publicação tem uma imagem. Se não, use um placeholder.
					// CORREÇÃO APLICADA AQUI:
					const postImage = post.postImageUrl || '/images/default-post.png';
					const postCard = document.createElement('div');
					postCard.className = 'grid-item';
					postCard.innerHTML = `
						<img src="${postImage}" alt="Publicação" />
						<div class="overlay">
							<p class="overlay-text">${post.content.substring(0, 50)}...</p>
						</div>
					`;
					postsContainer.appendChild(postCard);
				});
			} else {
				postsContainer.innerHTML = `
					<div class="empty-state">
						<div class="empty-state-icon"><i class="fas fa-camera"></i></div>
						<h2>Sem publicações no mural</h2>
						<p>As publicações que fizer no seu mural pessoal aparecerão aqui.</p>
					</div>`;
			}
		}

			// Função para renderizar os tópicos criados no formato de grelha
			function renderCreatedTopics(topics) {
				createdTopicsContainer.innerHTML = '';
				if (topics && topics.length > 0) {
					topics.forEach(topic => {
						const topicLink = `/Topics/Details/${topic.id}`;
						const topicImage = topic.topicImageUrl || '/images/default-topic.png';
						const topicCard = document.createElement('a'); // Agora é um link
						topicCard.href = topicLink;
						topicCard.className = 'grid-item';
						topicCard.innerHTML = `
							<img src="${topicImage}" alt="Imagem do Tópico" />
							<div class="overlay">
								<span class="overlay-text">${topic.title}</span>
							</div>
						`;
						createdTopicsContainer.appendChild(topicCard);
					});
				} else {
					createdTopicsContainer.innerHTML = `
						<div class="empty-state">
							<div class="empty-state-icon"><i class="fas fa-plus-circle"></i></div>
							<h2>Nenhum Tópico Criado</h2>
							<p>Crie o seu primeiro tópico para que ele apareça aqui.</p>
						</div>`;
				}
			}
			 // NOTA: Precisará de uma função para os tópicos guardados
			function renderSavedTopics(savedTopics) {
				 // Implemente a lógica aqui quando a sua API devolver os 'savedTopics'
				 // O código será muito semelhante a renderCreatedTopics
			}
		});
	</script>
}