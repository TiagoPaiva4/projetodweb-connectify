@{
    ViewData["Title"] = "Perfil";
}

<!-- Secção para mostrar um estado de carregamento -->
<div id="loading-state" class="text-center mt-5">
    <div class="spinner-border" role="status">
        <span class="visually-hidden">A carregar...</span>
    </div>
    <p class="mt-2">A carregar perfil...</p>
</div>

<!-- Secção do perfil, inicialmente escondida -->
<div id="profile-content" style="display: none;">
    <!-- Cabeçalho do Perfil -->
    <header class="profile-header">
        <div class="profile-avatar-container">
            <img id="profile-picture" src="" alt="Foto de Perfil" class="profile-avatar" />
        </div>
        <div class="profile-info">
            <div class="profile-info-header">
                <h2 id="profile-username" class="profile-username"></h2>
                <div id="action-buttons-container" class="d-flex align-items-center gap-2">
                    <!-- Botões de Ação (amizade, etc.) serão injetados aqui -->
                </div>
            </div>

            <!-- ESTATÍSTICAS ATUALIZADAS -->
            <ul class="profile-stats">
                <li><span id="topics-count" class="stat-number">0</span> tópicos criados</li>
                <li><span id="friends-count" class="stat-number">0</span> conexões</li>
            </ul>

            <div class="profile-bio">
                <strong id="profile-name"></strong>
                <p id="profile-bio"></p>
            </div>
        </div>
    </header>

    <!-- Abas de Navegação (Tabs) -->
    <div class="profile-tabs">
        <button class="tab-button active" data-target="#personal-posts-container">
            <i class="fas fa-th"></i> MURAL
        </button>
        <button class="tab-button" data-target="#created-topics-container">
            <i class="fas fa-list-ul"></i> TÓPICOS CRIADOS
        </button>
    </div>

    <!-- Conteúdo das Abas -->
    <div class="profile-tab-content">
        <div id="personal-posts-container" class="tab-content-panel active"></div>
        <div id="created-topics-container" class="tab-content-panel"></div>
    </div>
</div>

<!-- Secção para mostrar erros -->
<div id="error-state" class="text-danger" style="display: none;">
    <p>Ocorreu um erro ao carregar o perfil. Por favor, tente novamente mais tarde.</p>
</div>


@section Scripts {
    <style>
        /* Reutilize o mesmo CSS da página MyProfile.cshtml */
        :root {
            --color-background: #fafafa;
            --color-primary-dark: #1D3461;
            --color-primary-medium: #376996;
            --color-secondary-light: #6290C8;
            --color-danger: #dc3545;
            --color-success: #198754;
            --color-warning: #ffc107;
            --color-text-on-dark: #ffffff;
        }

        body {
            background-color: var(--color-background);
        }

        .profile-header {
            display: flex;
            align-items: center;
            margin-bottom: 40px;
            padding: 20px;
            max-width: 975px;
            margin-left: auto;
            margin-right: auto;
        }

        .profile-avatar-container {
            margin-right: 60px;
            flex-shrink: 0;
        }

        .profile-avatar {
            width: 150px;
            height: 150px;
            border-radius: 50%;
            object-fit: cover;
            border: 2px solid var(--color-secondary-light);
        }

        .profile-info {
            flex-grow: 1;
        }

        .profile-info-header {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
        }

        .profile-username {
            font-size: 28px;
            font-weight: 300;
            margin: 0;
            margin-right: 20px;
        }

        .btn-action {
            border: none;
            border-radius: 8px;
            padding: 7px 16px;
            font-weight: 600;
            cursor: pointer;
            transition: background-color 0.2s, opacity 0.2s;
            white-space: nowrap;
            text-decoration: none;
            display: inline-block;
            text-align: center;
        }

        .btn-action-primary {
            background-color: var(--color-primary-dark);
            color: white;
        }

            .btn-action-primary:hover:not(:disabled) {
                background-color: var(--color-primary-medium);
            }

        .btn-action-secondary {
            background-color: #efefef;
            color: #000;
            border: 1px solid #dbdbdb;
        }

            .btn-action-secondary:hover:not(:disabled) {
                background-color: #dbdbdb;
            }

        .btn-action-success {
            background-color: var(--color-success);
            color: white;
        }

        .btn-action-danger {
            background-color: var(--color-danger);
            color: white;
        }

        .btn-action-warning {
            background-color: var(--color-warning);
            color: #000;
        }

        .btn-action:disabled {
            cursor: default;
            opacity: 0.65;
        }

        .profile-stats {
            display: flex;
            list-style: none;
            padding: 0;
            margin: 0 0 20px 0;
        }

            .profile-stats li {
                margin-right: 40px;
                font-size: 16px;
            }

            .profile-stats .stat-number {
                font-weight: 600;
            }

        .profile-bio strong {
            font-weight: 600;
        }

        .profile-bio p {
            margin-top: 5px;
            white-space: pre-wrap;
        }

        .profile-tabs {
            display: flex;
            justify-content: center;
            border-top: 1px solid #dbdbdb;
        }

        .tab-button {
            background: none;
            border: none;
            color: #8e8e8e;
            padding: 18px 20px;
            font-size: 12px;
            font-weight: 600;
            letter-spacing: 1px;
            cursor: pointer;
            border-top: 1px solid transparent;
            margin-top: -1px;
            text-transform: uppercase;
        }

            .tab-button .fas {
                margin-right: 6px;
            }

            .tab-button.active {
                color: var(--color-primary-dark);
                border-top: 1px solid var(--color-primary-dark);
            }

        .profile-tab-content {
            max-width: 975px;
            margin: 0 auto;
        }

            .profile-tab-content .tab-content-panel {
                display: none;
            }

                .profile-tab-content .tab-content-panel.active {
                    display: grid;
                    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
                    gap: 28px;
                    padding-top: 20px;
                }

        .grid-item {
            position: relative;
            width: 100%;
            aspect-ratio: 1 / 1;
            cursor: pointer;
            text-decoration: none;
            color: inherit;
        }

            .grid-item img {
                width: 100%;
                height: 100%;
                object-fit: cover;
                border-radius: 4px;
            }

            .grid-item .overlay {
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background-color: rgba(0, 0, 0, 0.5);
                color: white;
                display: flex;
                flex-direction: column;
                justify-content: center;
                align-items: center;
                opacity: 0;
                transition: opacity 0.3s ease;
            }

            .grid-item:hover .overlay {
                opacity: 1;
            }

        .overlay-text {
            font-weight: bold;
            text-align: center;
            padding: 10px;
        }

        .empty-state {
            grid-column: 1 / -1;
            text-align: center;
            padding: 50px 20px;
            color: #8e8e8e;
        }

        .empty-state-icon {
            font-size: 40px;
            color: #262626;
            border: 2px solid #262626;
            width: 80px;
            height: 80px;
            border-radius: 50%;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 20px;
        }
    </style>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const loadingDiv = document.getElementById('loading-state');
            const profileDiv = document.getElementById('profile-content');
            const errorDiv = document.getElementById('error-state');
            const actionButtonsContainer = document.getElementById('action-buttons-container');
            const postsContainer = document.getElementById('personal-posts-container');
            const createdTopicsContainer = document.getElementById('created-topics-container');
            const profileUsername = '@ViewData["ProfileUsername"]';

            // Lógica das Abas
            const tabButtons = document.querySelectorAll('.tab-button');
            const tabPanels = document.querySelectorAll('.tab-content-panel');
            tabButtons.forEach(button => {
                button.addEventListener('click', () => {
                    tabButtons.forEach(btn => btn.classList.remove('active'));
                    tabPanels.forEach(panel => panel.classList.remove('active'));
                    button.classList.add('active');
                    document.querySelector(button.dataset.target)?.classList.add('active');
                });
            });

            function loadProfile() {
                if (!profileUsername) {
                    showError('Nome de utilizador não especificado.');
                    return;
                }

                fetch(`/api/profiles/${profileUsername}`)
                    .then(response => response.ok ? response.json() : response.json().then(err => Promise.reject(err)))
                    .then(data => {
                        document.getElementById('profile-picture').src = data.profilePicture || '/images/defaultuser.png';
                        document.getElementById('profile-username').textContent = data.username;
                        document.getElementById('profile-name').textContent = data.name;
                        document.getElementById('profile-bio').innerHTML = data.bio ? data.bio.replace(/\n/g, '<br>') : '<i>Nenhuma bio definida.</i>';
                        document.title = `${data.name || data.username}'s Profile - Connectify`;

                        // Preencher as novas estatísticas
                        document.getElementById('topics-count').textContent = data.createdTopics.length;
                        document.getElementById('friends-count').textContent = data.friendsCount;

                        renderActionButtons(data);
                        renderPersonalPosts(data.personalTopicPosts);
                        renderCreatedTopics(data.createdTopics);

                        loadingDiv.style.display = 'none';
                        profileDiv.style.display = 'block';
                    })
                    .catch(error => showError(error.message || 'Ocorreu um erro ao carregar o perfil.'));
            }

            function renderActionButtons(profileData) {
                actionButtonsContainer.innerHTML = '';
                const { friendshipStatus, userId } = profileData;

                if (friendshipStatus === 'self') {
                    // Se o perfil for do próprio utilizador (caso raro, mas possível)
                    const editButton = document.createElement('a');
                    editButton.href = '/Profiles/Edit';
                    editButton.className = 'btn-action btn-action-secondary';
                    editButton.textContent = 'Editar Perfil';
                    actionButtonsContainer.appendChild(editButton);
                    return;
                }

                const friendshipControls = document.createElement('div');
                friendshipControls.id = 'friendship-controls-placeholder';

                let btn;
                switch (friendshipStatus) {
                    case 'not_friends':
                        btn = createButton('Adicionar Amigo', 'btn-action-success', () => handleFriendshipAction('request', userId));
                        break;
                    case 'pending_sent':
                        btn = createButton('Cancelar Pedido', 'btn-action-warning', () => handleFriendshipAction('cancel', userId));
                        break;
                    case 'friends':
                        btn = createButton('Desfazer Amizade', 'btn-action-danger', () => {
                            if (confirm("Tem a certeza?")) handleFriendshipAction('unfriend', userId);
                        });
                        break;
                    case 'pending_received':
                        const acceptBtn = createButton('Aceitar', 'btn-action-success', () => handleFriendshipAction('accept', userId));
                        const rejectBtn = createButton('Rejeitar', 'btn-action-danger ms-2', () => handleFriendshipAction('reject', userId));
                        friendshipControls.append(acceptBtn, rejectBtn);
                        break;
                }
                if(btn) friendshipControls.appendChild(btn);

                // Adicionar botão de mensagem se não for o próprio perfil
                const messageButton = createButton('Enviar Mensagem', 'btn-action-primary', () => window.location.href = `/Messages/Chat?otherUserId=${userId}`, true);
                actionButtonsContainer.append(friendshipControls, messageButton);
            }

            function createButton(text, className, onClick, isLink = false) {
                const el = isLink ? document.createElement('a') : document.createElement('button');
                el.textContent = text;
                el.className = `btn-action ${className}`;
                if(isLink) el.href = "javascript:void(0);";
                el.onclick = onClick;
                return el;
            }

            async function handleFriendshipAction(action, targetUserId) {
                const url = `/api/friendships/${action}/${targetUserId}`;
                const buttons = actionButtonsContainer.querySelectorAll('button, a');
                buttons.forEach(b => b.style.opacity = '0.5');

                try {
                    const response = await fetch(url, { method: 'POST' });
                    if (!response.ok) throw new Error((await response.json()).message || 'Ação falhou.');
                    loadProfile(); // Recarrega o perfil para atualizar o estado dos botões
                } catch (error) {
                    alert(error.message);
                    buttons.forEach(b => b.style.opacity = '1'); // Reverte a opacidade em caso de erro
                }
            }

            function renderPersonalPosts(posts) { /* ... Lógica igual à MyProfile.cshtml, mas com texto genérico ... */ }
            function renderCreatedTopics(topics) { /* ... Lógica igual à MyProfile.cshtml, mas com texto genérico ... */ }

            function showError(message) {
                loadingDiv.style.display = 'none';
                errorDiv.querySelector('p').textContent = message;
                errorDiv.style.display = 'block';
            }

            // Iniciar o carregamento do perfil
            loadProfile();
        });
    </script>
}