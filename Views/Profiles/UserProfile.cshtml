@{
    ViewData["Title"] = "Perfil";
}

<!-- Secção para mostrar um estado de carregamento -->
<div id="loading-state" class="text-center mt-5">
    <div class="spinner-border" role="status">
        <span class="visually-hidden">A carregar...</span>
    </div>
    <p class="mt-2">A carregar perfil...</p>
</div>

<!-- Secção do perfil, inicialmente escondida -->
<div id="profile-content" style="display: none;">
    <!-- Cabeçalho do Perfil -->
    <header class="profile-header">
        <div class="profile-avatar-container">
            <img id="profile-picture" src="" alt="Foto de Perfil" class="profile-avatar" />
        </div>
        <div class="profile-info">
            <div class="profile-info-header">
                <h2 id="profile-username" class="profile-username"></h2>

                <!-- CONTAINER PARA OS BOTÕES DE AÇÃO (EDITAR, AMIZADE, MENSAGEM) -->
                <div id="action-buttons-container">
                    <!-- Os botões serão injetados aqui pelo JavaScript -->
                </div>
            </div>
            <ul class="profile-stats">
                <li><span id="topics-count" class="stat-number">0</span> tópicos</li>
                <li><span id="followers-count" class="stat-number">0</span> seguidores</li>
                <li><span id="following-count" class="stat-number">0</span> a seguir</li>
            </ul>
            <div class="profile-bio">
                <strong id="profile-name"></strong>
                <p id="profile-bio"></p>
            </div>
        </div>
    </header>

    <!-- Abas de Navegação (Tabs) -->
    <div class="profile-tabs">
        <button class="tab-button active" data-target="#personal-posts-container">
            <i class="fas fa-th"></i> MURAL
        </button>
        <button class="tab-button" data-target="#created-topics-container">
            <i class="fas fa-list-ul"></i> TÓPICOS CRIADOS
        </button>
    </div>

    <!-- Conteúdo das Abas -->
    <div class="profile-tab-content">
        <div id="personal-posts-container" class="tab-content-panel active"></div>
        <div id="created-topics-container" class="tab-content-panel"></div>
    </div>
</div>

<!-- Secção para mostrar erros -->
<div id="error-state" class="text-danger" style="display: none;">
    <p>Ocorreu um erro ao carregar o perfil. Por favor, tente novamente mais tarde.</p>
</div>


@section Scripts {
    <style>
        :root {
            --color-background: #fafafa;
            --color-primary-dark: #1D3461;
            --color-primary-medium: #376996;
            --color-secondary-light: #6290C8;
            --color-secondary-lightest: #829CBC;
            --color-text-on-dark: #ffffff;
            --color-danger: #dc3545;
            --color-success: #198754;
            --color-warning: #ffc107;
        }

        body {
            background-color: var(--color-background);
            color: var(--color-primary-dark);
        }

        .profile-header {
            display: flex;
            align-items: center;
            margin-bottom: 40px;
            padding: 20px;
        }

        .profile-avatar-container {
            margin-right: 60px;
            flex-shrink: 0;
        }

        .profile-avatar {
            width: 150px;
            height: 150px;
            border-radius: 50%;
            object-fit: cover;
            border: 2px solid var(--color-secondary-light);
        }

        .profile-info {
            flex-grow: 1;
        }

        .profile-info-header {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
        }

        .profile-username {
            font-size: 28px;
            font-weight: 300;
            margin: 0;
            margin-right: 20px;
        }

        #action-buttons-container {
            margin-left: 20px;
            display: flex;
            gap: 10px;
            align-items: center;
        }

        /* Estilos genéricos para todos os botões de ação */
        .btn-action {
            border: none;
            border-radius: 8px;
            padding: 8px 16px;
            font-weight: 600;
            cursor: pointer;
            transition: background-color 0.2s, opacity 0.2s, color 0.2s;
            white-space: nowrap;
            text-decoration: none;
            display: inline-block;
            text-align: center;
        }

            .btn-action.btn-action-primary {
                background-color: var(--color-primary-dark);
                color: var(--color-text-on-dark);
            }

                .btn-action.btn-action-primary:hover:not(:disabled) {
                    background-color: var(--color-primary-medium);
                }

            .btn-action.btn-action-secondary {
                background-color: #efefef;
                color: var(--color-primary-dark);
                border: 1px solid #dbdbdb;
            }

                .btn-action.btn-action-secondary:hover:not(:disabled) {
                    background-color: #dbdbdb;
                }

            .btn-action.btn-action-success {
                background-color: var(--color-success);
                color: var(--color-text-on-dark);
            }

                .btn-action.btn-action-success:hover:not(:disabled) {
                    background-color: #157347;
                }

            .btn-action.btn-action-danger {
                background-color: var(--color-danger);
                color: var(--color-text-on-dark);
            }

                .btn-action.btn-action-danger:hover:not(:disabled) {
                    background-color: #bb2d3b;
                }

            .btn-action.btn-action-warning {
                background-color: var(--color-warning);
                color: #000;
            }

                .btn-action.btn-action-warning:hover:not(:disabled) {
                    background-color: #ffca2c;
                }

            .btn-action:disabled {
                cursor: default;
                opacity: 0.65;
            }

        /* Resto do CSS */
        .profile-stats {
            display: flex;
            list-style: none;
            padding: 0;
            margin: 0 0 20px 0;
        }

            .profile-stats li {
                margin-right: 40px;
                font-size: 16px;
            }

            .profile-stats .stat-number {
                font-weight: bold;
            }

        .profile-bio strong {
            font-weight: bold;
        }

        .profile-bio p {
            margin-top: 5px;
            white-space: pre-wrap;
        }

        .profile-tabs {
            display: flex;
            justify-content: center;
            border-top: 1px solid var(--color-secondary-light);
        }

        .tab-button {
            background: none;
            border: none;
            color: var(--color-secondary-lightest);
            padding: 15px 20px;
            font-size: 12px;
            font-weight: bold;
            letter-spacing: 1px;
            cursor: pointer;
            border-top: 1px solid transparent;
            margin-top: -1px;
            text-transform: uppercase;
        }

            .tab-button .fas {
                margin-right: 6px;
            }

            .tab-button.active {
                color: var(--color-primary-dark);
                border-top: 1px solid var(--color-primary-dark);
            }

        .profile-tab-content .tab-content-panel {
            display: none;
        }

            .profile-tab-content .tab-content-panel.active {
                display: grid;
                grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
                gap: 28px;
                padding-top: 20px;
            }

        .grid-item {
            position: relative;
            width: 100%;
            aspect-ratio: 1 / 1;
            cursor: pointer;
            text-decoration: none;
            color: inherit;
        }

            .grid-item img {
                width: 100%;
                height: 100%;
                object-fit: cover;
                border-radius: 4px;
            }

            .grid-item .overlay {
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background-color: rgba(0, 0, 0, 0.5);
                color: var(--color-text-on-dark);
                display: flex;
                flex-direction: column;
                justify-content: center;
                align-items: center;
                opacity: 0;
                transition: opacity 0.3s ease;
            }

            .grid-item:hover .overlay {
                opacity: 1;
            }

        .overlay-text {
            font-weight: bold;
            text-align: center;
            padding: 10px;
        }

        .empty-state {
            grid-column: 1 / -1;
            text-align: center;
            padding: 50px 20px;
            color: var(--color-secondary-lightest);
        }

        .empty-state-icon {
            font-size: 40px;
            color: var(--color-primary-medium);
            border: 2px solid var(--color-primary-medium);
            width: 80px;
            height: 80px;
            border-radius: 50%;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 20px;
        }
    </style>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const loadingDiv = document.getElementById('loading-state');
            const profileDiv = document.getElementById('profile-content');
            const errorDiv = document.getElementById('error-state');
            const actionButtonsContainer = document.getElementById('action-buttons-container');
            const postsContainer = document.getElementById('personal-posts-container');
            const createdTopicsContainer = document.getElementById('created-topics-container');

            const profileUsername = '@ViewData["ProfileUsername"]';

            // ... (código das abas permanece o mesmo) ...
            const tabButtons = document.querySelectorAll('.tab-button');
            const tabPanels = document.querySelectorAll('.tab-content-panel');
            tabButtons.forEach(button => {
                button.addEventListener('click', () => {
                    tabButtons.forEach(btn => btn.classList.remove('active'));
                    tabPanels.forEach(panel => panel.classList.remove('active'));
                    button.classList.add('active');
                    const targetPanel = document.querySelector(button.dataset.target);
                    if (targetPanel) {
                        targetPanel.classList.add('active');
                    }
                });
            });

            function loadProfile() {
                if (!profileUsername) {
                    loadingDiv.style.display = 'none';
                    errorDiv.querySelector('p').textContent = 'Nome de utilizador não especificado.';
                    errorDiv.style.display = 'block';
                    return;
                }

                fetch(`/api/profiles/${profileUsername}`)
                    .then(response => {
                        if (!response.ok) {
                            return response.json().then(err => Promise.reject(err));
                        }
                        return response.json();
                    })
                    .then(data => {
                        // Preenche os dados do perfil na página
                        document.getElementById('profile-picture').src = data.profilePicture || '/images/defaultuser.png';
                        document.getElementById('profile-username').textContent = data.username;
                        document.getElementById('profile-name').textContent = data.name;
                        document.getElementById('profile-bio').innerHTML = data.bio || '<i>Nenhuma bio definida.</i>';
                        document.title = `${data.name || data.username}'s Profile - Connectify`;

                        document.getElementById('topics-count').textContent = data.createdTopics.length;
                        document.getElementById('followers-count').textContent = data.followersCount || 0;
                        document.getElementById('following-count').textContent = data.followingCount || 0;

                        // **INICIA A LÓGICA DE RENDERIZAÇÃO DE BOTÕES E CONTEÚDO**
                        renderActionAndFriendshipButtons(data);
                        renderPersonalPosts(data.personalTopicPosts);
                        renderCreatedTopics(data.createdTopics);

                        loadingDiv.style.display = 'none';
                        profileDiv.style.display = 'block';
                    })
                    .catch(error => {
                        console.error(`Erro ao buscar o perfil de ${profileUsername}:`, error);
                        errorDiv.querySelector('p').textContent = error.message || 'Ocorreu um erro ao carregar o perfil. Por favor, tente novamente mais tarde.';
                        loadingDiv.style.display = 'none';
                        errorDiv.style.display = 'block';
                    });
            }

            // =========================================================================
            // LÓGICA DE AMIZADE E AÇÕES
            // =========================================================================

            function renderActionAndFriendshipButtons(profileData) {
                actionButtonsContainer.innerHTML = ''; // Limpa botões antigos

                if (!profileData.friendshipStatus || !profileData.userId) {
                    console.error("Dados de amizade (friendshipStatus, userId) não foram retornados pela API.");
                    return;
                }

                if (profileData.friendshipStatus === 'self') {
                    const editButton = document.createElement('a');
                    editButton.href = `/Profiles/Edit/${profileData.id}`; // `id` aqui é o ProfileId
                    editButton.className = 'btn-action btn-action-secondary';
                    editButton.innerHTML = `<i class="fas fa-user-edit me-1"></i> Editar Perfil`;
                    actionButtonsContainer.appendChild(editButton);
                } else {
                    const messageButton = document.createElement('a');
                    messageButton.href = `/Messages/Chat?otherUserId=${profileData.userId}`;
                    messageButton.className = 'btn-action btn-action-primary';
                    messageButton.innerHTML = `<i class="fas fa-paper-plane"></i> Enviar Mensagem`;
                    actionButtonsContainer.appendChild(messageButton);

                    const friendshipControls = document.createElement('div');
                    friendshipControls.id = 'friendship-controls-placeholder';
                    actionButtonsContainer.appendChild(friendshipControls);

                    // O estado inicial já veio na primeira chamada, então podemos renderizar diretamente
                    setButtonState(profileData.friendshipStatus, profileData.userId);
                }
            }

            // Esta função agora é chamada diretamente ou pelo handleFriendshipAction
            function setButtonState(status, targetUserId) {
                const controlsPlaceholder = document.getElementById('friendship-controls-placeholder');
                if (!controlsPlaceholder) return;
                controlsPlaceholder.innerHTML = '';

                let btn;
                switch (status) {
                    case 'not_friends':
                        btn = document.createElement('button');
                        btn.textContent = 'Adicionar Amigo';
                        btn.className = 'btn-action btn-action-success';
                        btn.onclick = () => handleFriendshipAction(`/api/friendships/request/${targetUserId}`, 'POST', targetUserId);
                        controlsPlaceholder.appendChild(btn);
                        break;
                    case 'pending_sent':
                        btn = document.createElement('button');
                        btn.textContent = 'Cancelar Pedido';
                        btn.className = 'btn-action btn-action-warning';
                        btn.onclick = () => handleFriendshipAction(`/api/friendships/cancel/${targetUserId}`, 'POST', targetUserId);
                        controlsPlaceholder.appendChild(btn);
                        break;
                    case 'pending_received':
                        const acceptBtn = document.createElement('button');
                        acceptBtn.textContent = "Aceitar";
                        acceptBtn.className = "btn-action btn-action-success";
                        acceptBtn.onclick = () => handleFriendshipAction(`/api/friendships/accept/${targetUserId}`, 'POST', targetUserId);

                        const rejectBtn = document.createElement('button');
                        rejectBtn.textContent = "Rejeitar";
                        rejectBtn.className = "btn-action btn-action-danger ms-2";
                        rejectBtn.onclick = () => handleFriendshipAction(`/api/friendships/reject/${targetUserId}`, 'POST', targetUserId);

                        controlsPlaceholder.appendChild(acceptBtn);
                        controlsPlaceholder.appendChild(rejectBtn);
                        break;
                    case 'friends':
                        btn = document.createElement('button');
                        btn.textContent = 'Desfazer Amizade';
                        btn.className = 'btn-action btn-action-danger';
                        btn.onclick = () => {
                             if (confirm("Tem a certeza que quer desfazer esta amizade?")) {
                                handleFriendshipAction(`/api/friendships/unfriend/${targetUserId}`, 'POST', targetUserId);
                            }
                        };
                        controlsPlaceholder.appendChild(btn);
                        break;
                    default:
                        btn = document.createElement('button');
                        btn.textContent = 'Indisponível';
                        btn.className = 'btn-action btn-action-secondary';
                        btn.disabled = true;
                        controlsPlaceholder.appendChild(btn);
                }
            }

            async function handleFriendshipAction(url, method, targetUserId) {
                const buttons = document.querySelectorAll('#friendship-controls-placeholder button');
                buttons.forEach(b => b.disabled = true);

                try {
                    const response = await fetch(url, { method: method, headers: {} });
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Ação falhou.');
                    }
                    // Após uma ação bem-sucedida, precisamos de saber o novo estado.
                    // A forma mais simples é recarregar os dados do perfil.
                    loadProfile();
                } catch (error) {
                    console.error('Falha na requisição de ação:', error);
                    alert(error.message);
                    // Em caso de erro, reabilitar os botões pode ser útil, ou recarregar para reverter.
                    loadProfile();
                }
            }

            // =========================================================================
            // Funções de Renderização de Conteúdo
            // =========================================================================

            function renderPersonalPosts(posts) {
                postsContainer.innerHTML = '';
                if (posts && posts.length > 0) {
                    posts.forEach(post => {
                        if (!post.topicId) {
                            console.warn("Post com ID", post.id, "não tem 'topicId'. O link não será criado.");
                            return; // Pula este post se não tiver topicId
                        }
                        const postLink = `/Topics/Details/${post.topicId}?postId=${post.id}`;
                        const postImage = post.postImageUrl || '/images/default-post.png';
                        const postCard = document.createElement('a'); // Agora é um link
                        postCard.href = postLink;
                        postCard.className = 'grid-item';
                        postCard.innerHTML = `
                            <img src="${postImage}" alt="Publicação" />
                            <div class="overlay">
                                <p class="overlay-text">${post.content.substring(0, 50)}...</p>
                            </div>
                        `;
                        postsContainer.appendChild(postCard);
                    });
                } else {
                    postsContainer.innerHTML = `
                        <div class="empty-state">
                            <div class="empty-state-icon"><i class="fas fa-camera"></i></div>
                            <h2>Sem publicações no mural</h2>
                            <p>Este utilizador ainda não publicou no seu mural pessoal.</p>
                        </div>`;
                }
            }

            function renderCreatedTopics(topics) {
                createdTopicsContainer.innerHTML = '';
                if (topics && topics.length > 0) {
                    topics.forEach(topic => {
                        const topicLink = `/Topics/Details/${topic.id}`;
                        const topicImage = topic.topicImageUrl || '/images/default-topic.png';
                        const topicCard = document.createElement('a');
                        topicCard.href = topicLink;
                        topicCard.className = 'grid-item';
                        topicCard.innerHTML = `
                            <img src="${topicImage}" alt="Imagem do Tópico" />
                            <div class="overlay">
                                <span class="overlay-text">${topic.title}</span>
                            </div>
                        `;
                        createdTopicsContainer.appendChild(topicCard);
                    });
                } else {
                    createdTopicsContainer.innerHTML = `
                        <div class="empty-state">
                            <div class="empty-state-icon"><i class="fas fa-plus-circle"></i></div>
                            <h2>Nenhum Tópico Criado</h2>
                            <p>Este utilizador ainda não criou nenhum tópico.</p>
                        </div>`;
                }
            }

            loadProfile();
        });
    </script>
}