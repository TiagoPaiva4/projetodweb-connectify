@{
    ViewData["Title"] = "Explorar Perfis";
}

<h1 class="mb-4">@ViewData["Title"]</h1>

<!-- Secção para mostrar um estado de carregamento -->
<div id="loading-state" class="text-center mt-5">
    <div class="spinner-border" role="status">
        <span class="visually-hidden">A carregar...</span>
    </div>
    <p class="mt-2">A carregar perfis...</p>
</div>

<!-- Secções de Amigos e Descobrir -->
<div id="content-container" style="display: none;">
    <!-- Secção de Amigos -->
    <div id="friends-section">
        <h2 class="section-title">Amigos</h2>
        <div id="friends-container" class="row">
            <!-- Cartões de amigos aqui -->
        </div>
        <hr class="my-5">
    </div>

    <!-- Secção de Descobrir -->
    <div id="discover-section">
        <h2 class="section-title">Descobrir Novos Perfis</h2>
        <div id="discover-container" class="row">
            <!-- Cartões de outros utilizadores aqui -->
        </div>
    </div>
</div>

<!-- Secção para mostrar erros -->
<div id="error-state" class="text-danger" style="display: none;">
    <p>Ocorreu um erro ao carregar os perfis. Por favor, tente novamente mais tarde.</p>
</div>

@section Scripts {
    <style>
        :root {
            --color-background: #fafafa;
            --color-primary-dark: #1D3461;
            --color-primary-medium: #376996;
            --color-secondary-light: #6290C8;
            --color-secondary-lightest: #829CBC;
            --color-text-on-dark: #ffffff;
            --color-success: #198754;
            --color-warning: #ffc107;
            --color-danger: #dc3545;
        }

        body { background-color: var(--color-background); }
        h1, .section-title { color: var(--color-primary-dark); }
        .section-title { margin-bottom: 1.5rem; }

        /* Faz o cartão ser clicável */
        .profile-card-link-wrapper {
            display: block;
            text-decoration: none;
            color: inherit;
            height: 100%;
        }

        .profile-card {
            background-color: #ffffff;
            border: 1px solid var(--color-secondary-light);
            border-radius: 12px;
            padding: 20px;
            text-align: center;
            transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
            display: flex;
            flex-direction: column;
            height: 100%;
        }
        .profile-card-link-wrapper:hover .profile-card {
            transform: translateY(-5px);
            box-shadow: 0 8px 20px rgba(98, 144, 200, 0.15);
        }
        .profile-card-avatar {
            width: 100px; height: 100px; border-radius: 50%; object-fit: cover; margin: 0 auto 15px auto; border: 2px solid var(--color-secondary-light);
        }
        .profile-card-name {
            font-size: 1.2rem; font-weight: 600; color: var(--color-primary-dark); margin-bottom: 5px;
        }
        .profile-card-username {
            font-size: 0.9rem; color: var(--color-secondary-lightest); margin-bottom: 15px;
        }
        .profile-card-bio {
            font-size: 0.9rem; color: var(--color-primary-dark); opacity: 0.8; flex-grow: 1; margin-bottom: 20px;
        }
        
        .profile-card-actions {
            margin-top: auto; /* Empurra os botões para o fundo */
        }
        
        .btn-card-action {
            display: block; width: 100%; padding: 10px 20px; border-radius: 8px; text-decoration: none; font-weight: 600; border: none; cursor: pointer; transition: background-color 0.2s, opacity 0.2s;
        }
        .btn-card-action.success {
            background-color: var(--color-success); color: var(--color-text-on-dark);
        }
        .btn-card-action.warning {
            background-color: var(--color-warning); color: #000;
        }
        .btn-card-action.danger {
            background-color: var(--color-danger); color: var(--color-text-on-dark);
        }
         .btn-card-action.secondary {
            background-color: #e2e6ea; color: #000;
        }
        .btn-card-action:disabled {
            opacity: 0.65; cursor: not-allowed;
        }
    </style>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const loadingDiv = document.getElementById('loading-state');
            const contentContainer = document.getElementById('content-container');
            const friendsContainer = document.getElementById('friends-container');
            const discoverContainer = document.getElementById('discover-container');
            const errorDiv = document.getElementById('error-state');

            function loadAndRenderProfiles() {
                loadingDiv.style.display = 'block';
                contentContainer.style.display = 'none';

                fetch('/api/profiles')
                    .then(response => response.ok ? response.json() : Promise.reject(response))
                    .then(profiles => {
                        loadingDiv.style.display = 'none';
                        contentContainer.style.display = 'block';
                        
                        friendsContainer.innerHTML = '';
                        discoverContainer.innerHTML = '';
                        
                        if (profiles && profiles.length > 0) {
                            const friends = profiles.filter(p => p.friendshipStatus === 'friends');
                            const others = profiles.filter(p => p.friendshipStatus !== 'friends');

                            renderProfileSection(friends, friendsContainer, 'friends-section');
                            renderProfileSection(others, discoverContainer, 'discover-section');

                        } else {
                            document.getElementById('friends-section').style.display = 'none';
                            document.getElementById('discover-section').innerHTML = '<p class="text-center col-12">Não foram encontrados outros perfis.</p>';
                        }
                    })
                    .catch(error => {
                        console.error('Erro ao buscar os perfis:', error);
                        loadingDiv.style.display = 'none';
                        errorDiv.style.display = 'block';
                    });
            }

            function renderProfileSection(profiles, container, sectionId) {
                const section = document.getElementById(sectionId);
                if (profiles && profiles.length > 0) {
                    section.style.display = 'block';
                    profiles.forEach(profile => {
                        const profileCardCol = createProfileCard(profile);
                        container.appendChild(profileCardCol);
                    });
                } else {
                    section.style.display = 'none';
                }
            }
            
            function createProfileCard(profile) {
                const profileCardCol = document.createElement('div');
                profileCardCol.className = 'col-lg-3 col-md-4 col-sm-6 mb-4';

                const profileUrl = `/profile/${profile.username}`;
                const profileAvatar = profile.profilePicture || '/images/defaultuser.png';
                const shortBio = (profile.bio && profile.bio.length > 80) ? profile.bio.substring(0, 80) + '...' : profile.bio || 'Sem biografia.';

                let actionButtonHtml = '';
                // O botão de ação só é relevante se o utilizador não for já amigo
                switch(profile.friendshipStatus) {
                    case 'not_friends':
                        actionButtonHtml = `<button class="btn-card-action success" data-action="request" data-userid="${profile.userId}">Adicionar Amigo</button>`;
                        break;
                    case 'pending_sent':
                        actionButtonHtml = `<button class="btn-card-action warning" data-action="cancel" data-userid="${profile.userId}">Cancelar Pedido</button>`;
                        break;
                    case 'pending_received':
                         // Para quem recebeu um pedido, o botão de adicionar faz mais sentido aqui
                        actionButtonHtml = `<button class="btn-card-action success" data-action="accept" data-userid="${profile.userId}">Aceitar Pedido</button>`;
                        break;
                    case 'friends':
                        // Para amigos, o botão pode ser para desfazer amizade
                        actionButtonHtml = `<button class="btn-card-action danger" data-action="unfriend" data-userid="${profile.userId}">Desfazer Amizade</button>`;
                        break;
                }

                // O cartão inteiro está envolvido num link <a>
                profileCardCol.innerHTML = `
                    <a href="${profileUrl}" class="profile-card-link-wrapper">
                        <div class="profile-card">
                            <img src="${profileAvatar}" alt="Foto de ${profile.name}" class="profile-card-avatar" />
                            <h5 class="profile-card-name">${profile.name}</h5>
                            <p class="profile-card-username">@@${profile.username}</p>
                            <p class="profile-card-bio">${shortBio}</p>
                            <div class="profile-card-actions">
                                ${actionButtonHtml}
                            </div>
                        </div>
                    </a>
                `;

                // Adicionar o event listener ao botão para impedir a navegação
                const actionButton = profileCardCol.querySelector('.btn-card-action');
                if(actionButton) {
                    actionButton.addEventListener('click', handleFriendAction);
                }

                return profileCardCol;
            }
                
            async function handleFriendAction(event) {
                // Impede o link <a> pai de ser acionado
                event.preventDefault();
                event.stopPropagation();

                const button = event.target;
                const action = button.dataset.action;
                const userId = button.dataset.userid;

                button.disabled = true;
                button.textContent = 'A processar...';

                const actions = {
                    request: { url: `/api/friendships/request/${userId}`, confirmation: false },
                    cancel: { url: `/api/friendships/cancel/${userId}`, confirmation: false },
                    accept: { url: `/api/friendships/accept/${userId}`, confirmation: false },
                    unfriend: { url: `/api/friendships/unfriend/${userId}`, confirmation: true }
                };

                const currentAction = actions[action];
                if (!currentAction) return;

                if (currentAction.confirmation && !confirm('Tem a certeza?')) {
                    loadAndRenderProfiles(); // Recarrega para restaurar o botão
                    return;
                }

                try {
                    const response = await fetch(currentAction.url, { method: 'POST' });
                    if (!response.ok) {
                        const error = await response.json();
                        throw new Error(error.message || 'A ação falhou.');
                    }
                } catch (error) {
                    console.error(`Erro ao ${action} amigo:`, error);
                    alert(error.message);
                } finally {
                    loadAndRenderProfiles();
                }
            };

            loadAndRenderProfiles();
        });
    </script>
}