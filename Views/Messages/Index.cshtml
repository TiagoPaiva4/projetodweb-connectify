@model IEnumerable<projetodweb_connectify.Models.Conversation>
@{
    ViewData["Title"] = "Mensagens";
    var currentUserId = ViewBag.CurrentUserId as int?;
    var initialChatOtherUserId = ViewBag.InitialChatOtherUserId as int?;
}

<div class="messages-layout">
    <!-- Coluna da Esquerda: Lista de Conversas -->
    <div class="conversations-list-panel">
        <div class="conversations-header">
            <h4>Mensagens</h4>
            <a asp-controller="Profiles" asp-action="Search" class="btn-new-message" title="Nova Conversa">
                <i class="far fa-edit"></i>
            </a>
        </div>
        <div class="conversations-scrollable-list">
            @if (Model == null || !Model.Any())
            {
                <div class="p-4 text-center text-muted">
                    <p>Nenhuma conversa encontrada.</p>
                    <a asp-controller="Profiles" asp-action="BrowseUsers" class="btn btn-primary-custom btn-sm">Encontrar amigos</a>
                </div>
            }
            else
            {
                @foreach (var conv in Model)
                {
                    var other = conv.Participant1Id == currentUserId ? conv.Participant2 : conv.Participant1;
                    if (other == null) { continue; }
                    var lastMsg = conv.Messages.FirstOrDefault();
                    bool isActive = initialChatOtherUserId.HasValue && other.Id == initialChatOtherUserId.Value;

                    <a href="#" class="conversation-item @(isActive ? "active" : "")" data-otheruserid="@other.Id">
                        <img src="@(other.Profile?.ProfilePicture ?? "/images/defaultuser.png")" alt="Foto de @other.Username">
                        <div class="conversation-details">
                            <span class="conversation-name">@(other.Profile?.Name ?? other.Username)</span>
                            @if (lastMsg != null)
                            {
                                <p class="conversation-last-message mb-0">
                                    @if (lastMsg.SenderId == currentUserId)
                                    {
                                        <span class="fw-bold">Você:</span>
                                    }
                                    @lastMsg.Content
                                </p>
                            }
                            else
                            {
                                <p class="conversation-last-message mb-0 fst-italic">Inicie a conversa!</p>
                            }
                        </div>
                        @if (lastMsg != null)
                        {
                            <small class="conversation-timestamp">@lastMsg.SentAt.ToString("HH:mm")</small>
                        }
                    </a>
                }
            }
        </div>
    </div>

    <!-- Coluna da Direita: Placeholder ou Chat -->
    <div class="chat-content-panel" id="chatViewTarget">
        <div class="chat-placeholder">
            <i class="far fa-paper-plane"></i>
            <h5>As tuas mensagens</h5>
            <p>Envia fotos e mensagens privadas para um amigo.</p>
            <a asp-controller="Profiles" asp-action="BrowseUsers" class="btn btn-primary-custom">Enviar mensagem</a>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .main-content {
            padding: 0 !important; /* Remove o padding do layout para esta página */
            max-width: none !important;
        }

        .messages-layout {
            display: flex;
            /* Altura total menos a altura do footer e sua borda */
            height: calc(100vh - 57px);
            background-color: #fff;
            border: 1px solid #e0e0e0;
            border-bottom: none;
        }

        /* Coluna da Esquerda */
        .conversations-list-panel {
            width: 380px;
            min-width: 320px;
            border-right: 1px solid #e0e0e0;
            display: flex;
            flex-direction: column;
        }

        .conversations-header {
            padding: 1.25rem;
            border-bottom: 1px solid #e0e0e0;
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-shrink: 0;
        }

            .conversations-header h4 {
                margin: 0;
                font-weight: 600;
                color: var(--color-primary-dark);
            }

        .btn-new-message {
            color: var(--color-primary-dark);
            font-size: 1.5rem;
            cursor: pointer;
        }

        .conversations-scrollable-list {
            overflow-y: auto;
            flex-grow: 1;
        }

        .conversation-item {
            display: flex;
            align-items: center;
            padding: 0.75rem 1.25rem;
            cursor: pointer;
            text-decoration: none;
            color: inherit;
            border-bottom: 1px solid #f0f0f0;
            transition: background-color 0.2s ease;
        }

            .conversation-item:hover {
                background-color: #f9f9f9;
            }

            .conversation-item.active {
                background-color: var(--color-background-light);
            }

            .conversation-item img {
                width: 56px;
                height: 56px;
                border-radius: 50%;
                margin-right: 1rem;
                object-fit: cover;
            }

        .conversation-details {
            flex-grow: 1;
            overflow: hidden;
        }

        .conversation-name {
            font-weight: 600;
            color: var(--color-primary-dark);
        }

        .conversation-last-message {
            font-size: 0.9rem;
            color: var(--color-primary-medium);
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .conversation-timestamp {
            font-size: 0.8rem;
            color: var(--color-secondary-lightest);
            align-self: flex-start;
            padding-top: 4px;
        }

        /* Coluna da Direita */
        .chat-content-panel {
            flex-grow: 1;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
        }

        .chat-placeholder {
            text-align: center;
            color: var(--color-primary-dark);
        }

            .chat-placeholder i {
                font-size: 6rem;
                border: 2px solid var(--color-primary-dark);
                border-radius: 50%;
                padding: 2rem;
                margin-bottom: 1.5rem;
                display: inline-block;
            }

            .chat-placeholder h5 {
                font-weight: 300;
                font-size: 1.75rem;
            }

            .chat-placeholder p {
                color: var(--color-secondary-lightest);
                margin-bottom: 1.5rem;
            }

        .btn-primary-custom {
            background-color: var(--color-primary-medium);
            border-color: var(--color-primary-medium);
            color: #fff;
            padding: 0.5rem 1.5rem;
            font-weight: 600;
        }
    </style>
}

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.7/signalr.min.js"
            integrity="sha512-7SRCYIJtR6F8ocwW7UxW6wGKqbSyqREDbfCORCbGLatU0iugBLwyOXpzhkPyHIFdBO0K2VCu57fvP2Twgx1o2A=="
            crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script>
        $(document).ready(function () {
            const chatViewTarget = $('#chatViewTarget');
            const currentUserId = @(currentUserId.HasValue ? currentUserId.Value.ToString() : "null");
            let activeOtherUserId = @(initialChatOtherUserId.HasValue ? initialChatOtherUserId.Value.ToString() : "null");

            // =======================================================
            // 1. CONFIGURAÇÃO DO SIGNALR
            // =======================================================
            const chatConnection = new signalR.HubConnectionBuilder()
                .withUrl("/chatHub") // O URL que mapeámos no Program.cs
                .configureLogging(signalR.LogLevel.Information)
                .build();

            // 2. OUVIR POR NOVAS MENSAGENS DO SERVIDOR
            chatConnection.on("ReceiveMessage", function (message) {
                // Verificar se a janela de chat correta está aberta
                const messageIsForActiveChat = (message.senderId === currentUserId && activeOtherUserId === message.recipientId) ||
                                               (message.senderId === activeOtherUserId && activeOtherUserId === message.senderId);

                // No futuro, se a janela não estiver ativa, pode-se mostrar uma notificação aqui.
                // Por agora, só adicionamos a mensagem se o chat estiver ativo.
                if (activeOtherUserId && message.senderId !== currentUserId) {
                     appendMessageToChat(message);
                }
            });

            // 3. INICIAR A LIGAÇÃO SIGNALR
            async function startChatConnection() {
                try {
                    await chatConnection.start();
                    console.log("SignalR Ligado ao ChatHub.");
                } catch (err) {
                    console.error("Falha na ligação SignalR: ", err);
                    setTimeout(startChatConnection, 5000); // Tenta reconectar em 5 segundos
                }
            }
            startChatConnection();


            // =======================================================
            // LÓGICA EXISTENTE (COM AJUSTES)
            // =======================================================

            // Função para carregar um chat (continua a usar AJAX para o carregamento inicial)
            function loadChat(otherUserId) {
                activeOtherUserId = otherUserId; // Guarda o ID do utilizador com quem estamos a falar
                $('.conversation-item').removeClass('active');
                $(`.conversation-item[data-otheruserid='${otherUserId}']`).addClass('active');

                chatViewTarget.html('<div class="d-flex justify-content-center align-items-center h-100"><div class="spinner-border text-primary" role="status"></div></div>');
                const chatUrl = '@Url.Action("ChatPartial", "Messages")' + '?otherUserId=' + otherUserId;

                $.ajax({
                    url: chatUrl,
                    type: 'GET',
                    success: function (response) {
                        chatViewTarget.html(response);
                        scrollToBottom();
                    },
                    error: function () {
                        chatViewTarget.html('<div class="alert alert-danger m-3">Erro ao carregar a conversa.</div>');
                    }
                });
            }

            // Ação de clicar numa conversa na lista
            $('.conversation-item').on('click', function (e) {
                e.preventDefault();
                const otherUserId = $(this).data('otheruserid');
                loadChat(otherUserId);
            });

            // Carregar o chat inicial (se houver)
            if (activeOtherUserId) {
                loadChat(activeOtherUserId);
            }

            // =======================================================
            // 4. SUBMISSÃO DO FORMULÁRIO COM SIGNALR (A GRANDE MUDANÇA)
            // =======================================================
            $(document).on('submit', '#chatInputFormAjax', function (e) {
                e.preventDefault();
                var form = $(this);
                var messageContentInput = form.find('textarea[name="messageContent"]');
                var messageContent = messageContentInput.val();
                var recipientUserId = form.find('input[name="recipientUserId"]').val();

                if (!messageContent.trim() || !recipientUserId) return;

                // Em vez de AJAX, invocamos o método do Hub
                chatConnection.invoke("SendMessage", recipientUserId, messageContent)
                    .then(() => {
                        // A mensagem será recebida pelo "ReceiveMessage", mas podemos adicionar a nossa própria
                        // mensagem imediatamente para um feedback ainda mais rápido (atualização otimista).
                        const optimisticMessage = {
                            content: messageContent,
                            sentAt: new Date(),
                            senderId: currentUserId
                        };
                        appendMessageToChat(optimisticMessage);
                        messageContentInput.val(''); // Limpa o campo de texto
                        messageContentInput.focus();
                    })
                    .catch(err => console.error("Erro ao enviar mensagem via SignalR:", err.toString()));
            });


            // =======================================================
            // FUNÇÕES AUXILIARES DE UI
            // =======================================================

            function appendMessageToChat(message) {
                const chatMessagesArea = chatViewTarget.find('.chat-messages-partial');
                if (!chatMessagesArea.length) return; // Não faz nada se o chat não estiver carregado

                // Remove o placeholder "Envie a primeira mensagem!" se existir
                chatMessagesArea.find('.text-center.text-muted').remove();

                const isSentByMe = message.senderId === currentUserId;
                const bubbleClass = isSentByMe ? "sent" : "received";
                const time = new Date(message.sentAt).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

                // Sanitiza o conteúdo para prevenir XSS
                const sanitizedContent = $('<div/>').text(message.content).html().replace(/\n/g, '<br />');

                const messageHtml = `
                    <div class="message-bubble ${bubbleClass}">
                        ${sanitizedContent}
                        <div class="timestamp">${time}</div>
                    </div>`;

                chatMessagesArea.append(messageHtml);
                scrollToBottom();
            }

            function scrollToBottom() {
                const chatMessagesArea = chatViewTarget.find('.chat-messages-partial');
                if (chatMessagesArea.length) {
                    chatMessagesArea.scrollTop(chatMessagesArea[0].scrollHeight);
                }
            }
        });
    </script>
}